---
- name: Include variables
  ansible.builtin.include_role:
    name: lihas_variables
  when: configspaces is not defined
- name: Lihas_become init
  ansible.builtin.set_fact:
    lihas_become: "no"
- name: Check if become is necessary
  ansible.builtin.set_fact:
    lihas_become: "yes"
  when: ansible_effective_user_id != 0
- name: Install apache2
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - apache2
  loop_control:
    loop_var: item
  become: "{{ lihas_become | default(no) }}"

# setup apache2
- name: Apache base configuration, leak less information about server
  ansible.builtin.copy:
    dest: "{{ item }}"
    src: "files/{{ item }}"
    mode: '0444'
  loop:
    - "/etc/apache2/conf-available/servername.conf"
    - "/etc/apache2/conf-available/serversignature.conf"
    - "/etc/apache2/conf-available/servertokens.conf"
    - "/etc/apache2/conf-available/traceenable-off.conf"
    - "/etc/apache2/conf-available/no-x-powered-by.conf"
  loop_control:
    loop_var: item
  notify: reload_apache2
  become: "{{ lihas_become | default(no) }}"

- name: Check if security is enabled
  ansible.builtin.stat:
    path: /etc/apache2/conf-enabled/security.conf
  register: statresult
  become: "{{ lihas_become | default(no) }}"
- name: "Apache2: disable default security"
  ansible.builtin.command: a2disconf security
  notify: reload_apache2
  when: statresult.stat.exists
  become: "{{ lihas_become | default(no) }}"

- name: Stat /etc/apache2/sites-enabled/000-default.conf
  ansible.builtin.stat:
    path: /etc/apache2/sites-enabled/000-default.conf
  register: statresult
  become: "{{ lihas_become | default(no) }}"
- name: "Apache2: disable default site"
  ansible.builtin.command: a2dissite 000-default
  notify: reload_apache2
  when: statresult.stat.exists
  become: "{{ lihas_become | default(no) }}"

# Weniger Angriffsfläche auf den Client (XSS u.ä.)
- name: Reduce client attack surface
  ansible.builtin.copy:
    dest: "{{ item }}"
    src: "files/{{ item }}"
    mode: '0444'
  loop:
    - "/etc/apache2/conf-available/x-frame-options-sameorigin.conf"
    - "/etc/apache2/conf-available/x-content-type-options-nosniff.conf"
    - "/etc/apache2/conf-available/referrer-policy.conf"
  loop_control:
    loop_var: item
  notify: reload_apache2
  become: "{{ lihas_become | default(no) }}"

# SSL
- name: SSL base configuration
  ansible.builtin.copy:
    dest: "{{ item }}"
    src: "files/{{ item }}"
    mode: '0444'
  loop:
    - "/etc/apache2/conf-available/cipherorder.conf"
    - "/etc/apache2/conf-available/sslprotocol.conf"
    - "/etc/apache2/conf-available/strict-transport-security.conf"
    - "/etc/apache2/conf-available/sslproxy.conf"
  loop_control:
    loop_var: item
  notify: reload_apache2
  become: "{{ lihas_become | default(no) }}"

- name: Collect enabled modules
  ansible.builtin.set_fact:
    apache_module_enabled: "{{ apache_module_enabled | default([]) + hostvars[inventory_hostname][item]['config']['apache']['module']['enabled'] }}"
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['apache']['module']['enabled'] is defined
  become: "{{ lihas_become | default(no) }}"
- name: Collect disabled module
  ansible.builtin.set_fact:
    apache_module_disabled: "{{ apache_module_disabled | default([]) + hostvars[inventory_hostname][item]['config']['apache']['module']['disabled'] }}"
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['apache']['module']['disabled'] is defined
  become: "{{ lihas_become | default(no) }}"
- name: Collect enabled conf
  ansible.builtin.set_fact:
    apache_conf_enabled: "{{ apache_conf_enabled | default([]) + hostvars[inventory_hostname][item]['config']['apache']['conf']['enabled'] }}"
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['apache']['conf']['enabled'] is defined
  become: "{{ lihas_become | default(no) }}"
- name: Collect disabled conf
  ansible.builtin.set_fact:
    apache_conf_disabled: "{{ apache_conf_disabled | default([]) + hostvars[inventory_hostname][item]['config']['apache']['conf']['disabled'] }}"
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['apache']['conf']['disabled'] is defined
  become: "{{ lihas_become | default(no) }}"

- name: Apache enable conf
  ansible.builtin.include_tasks: "50-apache-a2enconf.yml"
  loop:
    - servername
    - serversignature
    - servertokens
    - traceenable-off
    - no-x-powered-by
    - x-frame-options-sameorigin
    - x-content-type-options-nosniff
    - referrer-policy
    - cipherorder
    - sslprotocol
    - strict-transport-security
    - sslproxy
  loop_control:
    loop_var: item
- name: Apache global httpsrewrite
  ansible.builtin.include_tasks: "50-apache-a2enconf.yml"
  loop:
    - httpsrewrite
  loop_control:
    loop_var: item
  when: LIHASVARS.apache.features.httpsrewrite | default(true)

- name: Apache enable modules
  ansible.builtin.include_tasks: "50-apache-a2enmod.yml"
  loop:
    - ssl
    - headers
    - rewrite
    - http2
  loop_control:
    loop_var: item

- name: Collect rproxy entries
  ansible.builtin.set_fact:
    rproxy_domains: "{{ LIHASVARS.roles.rproxy | default({}) }}"
  when: LIHASVARS.roles.rproxy is defined
- name: DEBUG RPROXY after %.roles.rproxy.domains
  ansible.builtin.debug:
    var: rproxy_domainnames
    verbosity: 1
- name: Collect rproxy entries
  ansible.builtin.set_fact:
    rproxy_domains: "{{ rproxy_domains | default({}) | combine({'domains': hostvars[inventory_hostname][item]['config']['roles']['rproxy']['domains']}) }}"
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['roles']['rproxy']['domains'] is defined
- name: DEBUG RPROXY after %.roles.rproxy.domains
  ansible.builtin.debug:
    var: rproxy_domainnames
    verbosity: 1

- name: Collect rproxy entries LIHASVARS
  ansible.builtin.set_fact:
    rproxy_domainnames: "{{ LIHASVARS.roles.rproxy.domains | default({}) | flatten(levels=1) }}"
  loop: "{{ configspaces }}"
  when: LIHASVARS.roles.rproxy.domains is defined
- name: DEBUG RPROXY after %.roles.rproxy.domains
  ansible.builtin.debug:
    var: rproxy_domainnames
    verbosity: 1
- name: "Collect rproxy entries {{ configspaces }}"
  ansible.builtin.set_fact:
    rproxy_domainnames: >
      {{ rproxy_domainnames | default([]) + hostvars[inventory_hostname][item]['config']['roles']['rproxy']['domains'] |
      default({}) | flatten(levels=1) }}
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['roles']['rproxy']['domains'] is defined
- name: DEBUG RPROXY after %.roles.rproxy.domains
  ansible.builtin.debug:
    var: rproxy_domainnames
    verbosity: 1
- name: Collect dehydrated entries
  ansible.builtin.set_fact:
    rproxy_domainnames: >
      {{ rproxy_domainnames | default([]) + hostvars[inventory_hostname][item]['config']['roles']['dehydrated']['domains'] | default({}) |
      flatten(levels=1) }}
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['roles']['dehydrated']['domains'] is defined
- name: DEBUG RPROXY after %.roles.dehydrated.domains
  ansible.builtin.debug:
    var: rproxy_domainnames
    verbosity: 1
- name: Collect external_redirect entries
  ansible.builtin.set_fact:
    rproxy_domainnames: >
      {{ rproxy_domainnames | default([]) + hostvars[inventory_hostname][item]['config']['roles']['external_redirect']['domains'] |
      flatten(levels=1) }}
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['roles']['external_redirect']['domains'] is defined

# Apache HTTPS Reverse Proxy, Zielserver ist HTTPS
- name: "File /etc/apache2/sites-available/reverse_proxy_https_letsencrypt.conf"
  ansible.builtin.template:
    dest: /etc/apache2/sites-available/reverse_proxy_https_letsencrypt.conf
    src: files/etc/apache2/sites-available/reverse_proxy_https_letsencrypt.conf
    mode: '0444'
  notify: reload_apache2
  become: "{{ lihas_become | default(no) }}"

- name: Collect external_redirect entries
  ansible.builtin.set_fact:
    external_redirect_domains: "{{ LIHASVARS.roles.external_redirect | default({}) }}"
  when: LIHASVARS.roles.external_redirect is defined
- name: Collect external_redirect entries
  ansible.builtin.set_fact:
    external_redirect_domains: >
      {{ external_redirect_domains | default({}) |
      combine({'domains': hostvars[inventory_hostname][item]['config']['roles']['external_redirect']['domains']}) }}
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['roles']['external_redirect']['domains'] is defined
# Apache HTTPS external redirects, domain->domain
- name: "File /etc/apache2/sites-available/reverse_proxy_https_letsencrypt.conf"
  ansible.builtin.template:
    dest: /etc/apache2/sites-available/external_redirect.conf
    src: files/etc/apache2/sites-available/external_redirect.conf
    mode: '0444'
  notify: reload_apache2
  become: "{{ lihas_become | default(no) }}"

# Apache HTTPS local domains
- name: Collect local_pages entries
  ansible.builtin.set_fact:
    local_pages: "{{ LIHASVARS.roles.local_pages | default({}) }}"
  when: LIHASVARS.roles.local_pages is defined
- name: Collect local_pages entries
  ansible.builtin.set_fact:
    local_pages: "{{ local_pages | default({}) | combine({'domains': hostvars[inventory_hostname][item]['config']['roles']['local_pages']['domains']}) }}"
    cacheable: false
  loop: "{{ configspaces }}"
  when: hostvars[inventory_hostname][item]['config']['roles']['local_pages']['domains'] is defined
- name: "/etc/apache2/sites-available/local_pages.conf"
  ansible.builtin.template:
    dest: /etc/apache2/sites-available/local_pages.conf
    src: files/etc/apache2/sites-available/local_pages.conf
    mode: '0444'
  notify: reload_apache2
  become: "{{ lihas_become | default(no) }}"

- name: Apache enable site
  ansible.builtin.include_tasks: "50-apache-a2ensite.yml"
  loop:
    - reverse_proxy_https_letsencrypt
    - external_redirect
    - local_pages
  loop_control:
    loop_var: item

- name: Apache enable modules
  ansible.builtin.include_tasks: "50-apache-a2enmod.yml"
  loop:
    - macro
    - proxy
    - proxy_http
    - proxy_http2
    - proxy_wstunnel
    - remoteip
  loop_control:
    loop_var: item

- name: Dummy Zertifikate rproxy_domainnames
  ansible.builtin.include_tasks: "50-apache-dummycert.yml"
  loop: "{{ rproxy_domainnames }}"
  loop_control:
    loop_var: item
  when: rproxy_domainnames is defined
- name: Dummy Zertifikate external_redirect_domains
  ansible.builtin.include_tasks: "50-apache-dummycert.yml"
  loop: "{{ external_redirect_domains.domains | flatten(levels=1) }}"
  loop_control:
    loop_var: item
  when: external_redirect_domains.domains is defined
- name: Dummy Zertifikate local_pages
  ansible.builtin.include_tasks: "50-apache-dummycert.yml"
  loop: "{{ local_pages.domains | flatten(levels=1) }}"
  loop_control:
    loop_var: item
  when: local_pages is defined
- name: /etc/hosts rproxy entries
  ansible.builtin.blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK role lihas-apache {{ item }}"
    path: /etc/hosts
    block: |
      {{ rproxy_domains.domains[item]['target_ip'] | default('#') }} {{ item }}
  loop: "{{ rproxy_domains.domains | flatten(levels=1) }}"
  when: rproxy_domains is defined
  become: "{{ lihas_become | default(no) }}"

- name: Apache enable additional modules
  ansible.builtin.include_tasks: "50-apache-a2enmod.yml"
  with_list: "{{ apache_module_enabled }}"
  loop_control:
    loop_var: item
  when: apache_module_enabled is defined
- name: Apache disable unwanted modules
  ansible.builtin.include_tasks: "50-apache-a2dismod.yml"
  with_list: "{{ apache_module_disabled }}"
  loop_control:
    loop_var: item
  when: apache_module_disabled is defined
- name: Apache enable additional config
  ansible.builtin.include_tasks: "50-apache-a2enconf.yml"
  with_list: "{{ apache_conf_enabled }}"
  loop_control:
    loop_var: item
  when: apache_conf_enabled is defined
- name: Apache disable unwanted config
  ansible.builtin.include_tasks: "50-apache-a2disconf.yml"
  with_list: "{{ apache_conf_disabled }}"
  loop_control:
    loop_var: item
  when: apache_conf_disabled is defined
...
